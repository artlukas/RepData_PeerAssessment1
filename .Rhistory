swirl()
library(swirl)
swirl(9)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique,numeric(1))
FUN(X[[1]])
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10,)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips <- rbinom(1, size=100, prob=0.7)
flips <- rbinom(100, size=1, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
dr <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B, %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, =cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, ylab="Stoppiing Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance", xlab="Speed")
plot(cars, main="My Plot")
plot(cars, title="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch=2)
data(mtcars)
dim(mtcars)
play()
head(mtcars)
str(mtcars)
nxt
nxt()
boxplot()
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
read.csv("hw1_data.csv")
dir
dir()
cd..
hw1_data <- read.csv("~/R/coursera/hw1_data.csv")
View(hw1_data)
is.na(hw1_data$Ozone)
ozone_na <- is.na(hw1_data$Ozone)
sum(ozone_na)
ozone_values <- hw1_data$Ozone[-ozone_na]
ozone_values
ozone_values <- hw1_data$Ozone[c(-ozone_na)]
ozone_values
ozone <- hw1_data$Ozone
ozone
ozone[!is.na(ozone)]
ozone_value <- ozone[!is.na(ozone)]
ozone_values
ozone_value
mean(ozone_value)
ozone31 <- hw1_data$Ozone > 31
ozone31
temp90 <- hw1_data$Temp > 90
solar_sub <- hw1_data["Solar.R", ozone31 & temp90]
solar_sub <- hw1_data[Solar.R, ozone31 & temp90]
solar_sub <- hw1_data[hw_data$Solar.R, ozone31 & temp90]
head(hw_data1)
head(hw1_data)
solar_sub <- hw1_data[Solar.R, ozone31]
ls()
summary(hw1_data)
solar_sub <- hw1_data[ozone31 & temp90, Solar.R]
solar_sub <- hw1_data[ozone31 & temp90, "Solar.R"]
solar_sub
solar_sub <- matrix(hw1_data[ozone31 & temp90, "Solar.R"], drop=FALSE)
solar_sub <- hw1_data[ozone31 & temp90, "Solar.R", drop=FALSE]
solar_sub
solar_sub <- hw1_data[ozone >31 & temp > 90, "Solar.R", drop=FALSE]
solar_sub <- hw1_data["Ozone" >31 & "Temp" > 90, "Solar.R", drop=FALSE]
solar_sub
ozone <- hw1_data$Ozone
temp <- hw1_data$Temp
ozone31 <- ozone > 31
ozone31
temp90 <- temp > 90
oztemp <- temp90 & ozone31
oztemp
solar_rows <- hw_data1[oztemp, "Solar.R"]
solar_rows <- hw1_data[oztemp, "Solar.R"]
solar_rows
solar_rows <- hw1_data[!is.na(oztemp), "Solar.R"]
solar_rows
solar_rows <- hw1_data[!is.na(oztemp), "Solar.R", drop=FALSE]
solar_rows
solar_rows <- hw1_data[!is.na(oztemp), "Solar.R"]
str(solar_rows)
solar_rows <- hw1_data[oztemp, "Solar.R"]
str(solar_rows)
mean(solar_rows)
solar_clean <- !is.na(solar_rows)
solar_clean
solar_clean(solar_rows)
solar_rows[solar_clean]
mean(solar_rows[solar_clean])
month <- hw1_data$Month
month6 <- month[==6]
month6 <- month==6
month6
temp <- hw1_data[month[month6], "Temp"]
temp
temp <- hw1_data$Temp
temp
m6 <- month[month6]
m6
temp[month6]
mean(temp[month6])
month5 <- month == 5
month5
ozone
ozone_may <- ozone[month5]
ozone_may
ozoneclean <- ozone_may[!is.na(ozone_may)]
ozoneclean
max(oxoneclean)
max(ozoneclean)
install.packages("UsingR")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
library(manipulate)
install.packages("manipulate")
library(manipulate)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(ggplot2)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(W*x,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((w*x - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(w*x,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((w*x - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("ggplot2")
mean(x*w)
x
w
w*x
mean(x*w)
cube <- function(x, n) {
x^3
}
}
cube <- function(x, n) {
x^3
}
submit()
source()
cube(3)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
y <- 6
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
add2 <- function (x,y) {
x+y
}
add2(4,5)
above10 <- function(x) {
use <- x>10
x[use]
}
above10(c(1,12,13,4,7))
above(c(1,12,13,4,7), 5)
above <- function(x,n){
use <- x>n
x[use]
}
above(c(1,12,13,4,7), 5)
setwd("C:/Users/Art/Documents/R/coursera/reproducible/peer1/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
dates <- as.Date(data[[2]])
uniqueDates <- unique(dates)
stepsTable <- data.frame()
for (x in uniqueDates){
y <- dates == x
stepsPerInterval <- data$steps[y]
stepsPerDay <- sum(stepsPerInterval, na.rm=TRUE)
stepsTable <- rbind(stepsTable, c(x, stepsPerDay))
}
colnames(stepsTable) <- c("Date", "Steps")
# print(stepsTable)
# Make a histogram of the total number of steps taken each day
hist(stepsTable[,2], main="Number of steps taken each day", xlab="Daily steps")
# Calculate and report the mean and median of the total number of steps taken per day
print(paste("Mean:", mean(stepsTable[,2])))
print(paste("Median:", median(stepsTable[,2])))
```
## What is the average daily activity pattern?
```{r echo = TRUE}
uniqueInterval <- unique(data$interval)
intTable <- data.frame()
for (x in uniqueInterval) {
print(x)
u <- x == data$interval
m <- mean(data$steps[u], na.rm=TRUE)
intTable <- rbind(intTable, c(x, m))
}
colnames(intTable) <- c("interval", "steps")
# Create the plot
plot (x=intTable$interval, y=intTable$steps, type="l", ylab="Average steps", xlab="Interval")
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
maxSteps <- max(intTable$steps)
maxInt <- intTable$interval[intTable$steps[maxSteps]]
print(paste("Maximum average steps:",maxSteps,"at interval", maxInt))
```
## Imputing missing values
```{r echo=TRUE}
naSteps <- is.na(data$steps)
print(paste("Missing values in", sum(naSteps), "rows"))
# use the mean for that day to fill in all of the missing values in the dataset
tableLength <- length(dates)
print(tableLength)
stepsVector <- numeric()
rowValue <- numeric()
for (x in 1:tableLength) {
if (is.na(data$steps[[x]])) {
w <- which(intTable$interval == data$interval[x])
rowValue <- intTable$steps[w]
}
else {
rowValue <- data$steps[x]
}
stepsVector <- c(stepsVector, rowValue)
}
newTable <- data.frame(cbind(stepsVector, dates, data$interval))
names(newTable)<- names(data)
newTable
hist(newTable[,2], main="Number of steps taken each day", xlab="Daily steps")
# Calculate and report the mean and median of the total number of steps taken per day
print(paste("Mean:", mean(stepsTable[,2])))
print(paste("Median:", median(stepsTable[,2])))
?weekdays
dates[1]
weekdays(dates[1])
length(dates)
whatDay <- weekdays(dates)
unique(whatDay)
dayLevels <- c(rep("weekday", 5), rep("weekend", 2))
dayLevels
weekdayTable <- cbind(unique(whatDay), dayLevels)
weekdayTable
weekdayVector <- match(whatDay, weekdayTable[,1])
addLevels <- weekdayTable[weekdayVector,2]
source('~/R/coursera/reproducible/peer1/code.R')
newTableW <- data.frame(cbind(newTable, addLevels))
head(newTableW)
summary(newTableW)
?plot
par(mfrow(c(2,1)))
par(mfrow = c(2,1))
with(subset(newTableW, addLevels = "weekend")), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval")
with(subset(newTableW, addLevels = "weekend"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels = "weekday"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
par(mfrow = c(2,1), mar=c(4,4,2,1)
)
summary(newTableW)
plot (x=intTable$interval, y=intTable$steps, type="l", ylab="Average steps", xlab="Interval")
?par
plot (x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval")
with(subset(newTableW, addLevels = "weekday"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels = "weekend"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels = "weekday"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels = "weekend"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels = "savi"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels = "savi"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels == "savi"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels == "weekday"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, addLevels == "savi"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == "savi"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == "weekday"), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == 3), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == 1), plot(x=newTableW$interval, y=newTableW$steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == 1), summary(newTableW)
)
subset(newTableW, addLevels == "weekend")
subset(newTableW, addLevels == "weekday")
with(subset(newTableW, newTableW$addLevels == 1), plot(x=interval, y=steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == 1), plot(interval, steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == "weekday"), plot(interval, steps, type="l", ylab="Average steps", xlab="Interval"))
with(subset(newTableW, newTableW$addLevels == "weekend"), plot(interval, steps, type="l", ylab="Average steps", xlab="Interval"))
